

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ProfileType {
  Public
  Private
  Business
}

enum Visibility {
  Public
  Private
  Archive
}

enum MediaType {
  Image
  Video
  Clip
}

enum ChatType {
  Private
  Group
}

enum FollowStatus {
  Pending
  Accepted
}

model User {
  id              String  @id @map("_id") @default(auto()) @db.ObjectId
  email           String? 
  password        String?
  googleId        String?
  facebookId      String?
  appleId         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  profile         Profile? 
}

model Profile {
  id              String @id @map("_id") @default(auto()) @db.ObjectId
  userId          String @unique @db.ObjectId
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  username        String @unique
  name            String?
  bio             String?
  dateofBirth     DateTime?
  website         String?
  profilePic      String?
  address         String?
  type            ProfileType @default(Public)
  posts           Post[]
  clips           Clip[]
  likes           Like[]
  comments        Comment[]
  following       Follow[] @relation("following")
  followers       Follow[] @relation("followers")
  saved           Saved[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Saved {
  id        String   @id @map("_id") @default(auto()) @db.ObjectId
  userId    String   @db.ObjectId
  user      Profile  @relation(fields: [userId], references: [userId], onDelete: Cascade)

  postId    String?  @db.ObjectId
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)

  clipId    String?  @db.ObjectId
  clip      Clip?    @relation(fields: [clipId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@unique([userId, clipId])
}

model Follow {
  id                String @id @map("_id") @default(auto()) @db.ObjectId
  followingId       String  @db.ObjectId
  following         Profile @relation("following", fields: [followingId], references: [id])
  status            FollowStatus @default(Pending)
  followerId        String  @db.ObjectId
  follower          Profile @relation("followers", fields: [followerId], references: [id])
  @@unique([followerId, followingId])
  @@index([followingId])
  @@index([followerId])
}

model Post {
  id          String @id @map("_id") @default(auto()) @db.ObjectId
  userId      String @db.ObjectId
  user        Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  text        String?
  media       Media[]
  visibility  Visibility @default(Public)
  likes       Like[]
  comments    Comment[]
  savedBy     Saved[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@index([userId])
}

model Media {
  id          String @id @map("_id") @default(auto()) @db.ObjectId
  postId      String @db.ObjectId
  post        Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  type        MediaType
  url         String
  createdAt   DateTime  @default(now())

  @@index([postId])
}

model Clip {
  id            String @id @map("_id") @default(auto()) @db.ObjectId
  userId        String @db.ObjectId
  user          Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)
  visibility    Visibility @default(Public)
  video         String
  text          String?
  likes         Like[]
  comments      Comment[]
  savedBy       Saved[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Like {
  id          String @id @map("_id") @default(auto()) @db.ObjectId
  postId      String? @db.ObjectId
  post        Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  clipId        String? @db.ObjectId
  clip          Clip? @relation(fields: [clipId], references: [id], onDelete: Cascade)
  commentId     String? @db.ObjectId
  comment       Comment? @relation(fields: [commentId], references: [id])
  likedById   String @db.ObjectId 
  likedBy     Profile @relation(fields: [likedById], references: [userId], onDelete: Cascade)
  createdAt  DateTime @default(now())

}

model Comment {
  id            String @id @map("_id") @default(auto()) @db.ObjectId
  postId        String? @db.ObjectId
  post          Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  clipId        String? @db.ObjectId
  clip          Clip? @relation(fields: [clipId], references: [id], onDelete: Cascade)
  comment       String
  commentById   String @db.ObjectId 
  commentBy     Profile @relation(fields: [commentById], references: [userId], onDelete: Cascade)
  likedBy       Like[]

  parentCommentId  String?   @db.ObjectId
  parentComment    Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies          Comment[] @relation("CommentReplies")

  createdAt     DateTime @default(now())
}

model Chat {
  id            String @id @map("_id") @default(auto()) @db.ObjectId
  type          ChatType
  messages      Message[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

}

model Message {
  id            String @id @map("_id") @default(auto()) @db.ObjectId
  chatId        String @db.ObjectId
  chat          Chat   @relation(fields: [chatId], references: [id])
  senderId      String @db.ObjectId
  cotent        String 
}